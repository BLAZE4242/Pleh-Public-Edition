using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using TMPro;
using UnityEngine.UI;

public class hub_introManager : MonoBehaviour
{
    enum hubIntroState { idle, selectingPoster, selectedPoster, waitingToType, typingTopCaption, notBottomButVoiceLine, typingBottomCaption, finished, okAlmostFinished, okActuallyFinished }
    [SerializeField] hubIntroState currentState;
    [SerializeField] SpriteRenderer posterRenderer;
    [SerializeField] SpriteRenderer posterGlitchRenderer;
    [SerializeField] Sprite[] glitchedSprites;
    [SerializeField] List<Sprite> posterImages = new List<Sprite>();
    [SerializeField] TextMeshPro TopText, BottomText;

    [Header("Voice Lines")]
    // for selecting the poster
    [SerializeField] VoiceLine startingLine;
    [SerializeField] VoiceLine haventScrolled;
    [SerializeField] VoiceLine haventScrolled1;
    [SerializeField] VoiceLine suggestEnter;
    [SerializeField] VoiceLine haventEntered;
    [SerializeField] VoiceLine haventEntered1;
    [SerializeField] VoiceLine haventEntered2;
    [SerializeField] VoiceLine haventEntered3;
    // for typing top caption
    [SerializeField] VoiceLine setupTopLine;
    // for typing bottom caption
    [SerializeField] VoiceLine setupBottomLine;
    //final
    [SerializeField] VoiceLine finish;
    [SerializeField] VoiceLine doorLine;

    [SerializeField] Transform facingPosterPos;
    [Header("Load Next Level")]
    [SerializeField] Image blackScreen;

    float timer = 0;
    int timeItteration = 0;
    bool canPressEnter = false;
    bool canScroll = true;

    VoiceLineManager _voiceLineManager;

    void Awake()
    {
        if (PlayerPrefs.GetInt("glotchiness") == 2 || !PlayerPrefs.HasKey("meme data"))
        {
            Sprite missingTexture = posterImages[0];
            posterImages.RemoveAt(0);
            posterImages.Shuffle();
            posterImages.Insert(0, missingTexture);
        }
    }

    private void Start()
    {
        _voiceLineManager = FindObjectOfType<VoiceLineManager>();
        if (PlayerPrefs.GetInt("glotchiness") == 2)
        {
            FindObjectOfType<DRP>().RP("What have I done?");
            _voiceLineManager.PlayLine(startingLine);
        }
        else if (PlayerPrefs.HasKey("meme data"))
        {
            string[] data = PlayerPrefs.GetString("meme data").Split('|');
            string photoName = data[0];
            Debug.Log(photoName);
            string topText = data[1];
            string bottomText = data[2];

            foreach (Sprite photo in posterImages)
            {
                if (photo.name == photoName)
                {
                    posterRenderer.sprite = photo;
                    Debug.Log("Getting called?");
                }
            }

            TopText.text = topText;
            BottomText.text = bottomText;
        }

        GlitchPoster();
    }

    void GlitchPoster()
    {
        int glitchIndex = 0;
        switch (PlayerPrefs.GetInt("glotchiness"))
        {
            case 4:
                glitchIndex = 1;
                TopText.text = glitchText(TopText.text, Mathf.RoundToInt(TopText.text.Length / 4));
                BottomText.text = glitchText(BottomText.text, Mathf.RoundToInt(BottomText.text.Length / 4));
                break;
            case 5:
                glitchIndex = 2;
                TopText.text = glitchText(TopText.text, Mathf.RoundToInt(TopText.text.Length / 2));
                BottomText.text = glitchText(BottomText.text, Mathf.RoundToInt(BottomText.text.Length / 2));
                break;
            case 6:
                glitchIndex = 3;
                TopText.text = glitchText(TopText.text, Mathf.RoundToInt(TopText.text.Length / 1.333f));
                BottomText.text = glitchText(BottomText.text, Mathf.RoundToInt(BottomText.text.Length / 1.333f));
                break;
            case 7:
                glitchIndex = 4;
                TopText.text = glitchText(TopText.text, Mathf.RoundToInt(TopText.text.Length));
                BottomText.text = glitchText(BottomText.text, Mathf.RoundToInt(BottomText.text.Length));
                break;
        }

        posterGlitchRenderer.sprite = glitchedSprites[glitchIndex];
    }

    string glitchText(string original, int count) // this was generated by an ai! and it's the only thing in the game that is. 14/02/2023
    {
        if (count <= 0 || count > original.Length)
        {
            return original;
        }
        else
        {
            string result = original.Remove(0, count);
            for(int i = 0; i < count-1;i++) result = result.Insert(0, "🗅");
            return result;
        }
    }

    public void activateScrolling()
    {
        currentState = hubIntroState.selectingPoster;
    }

    public void StopScrolling()
    {
        canScroll = false;
    }

    public void activateEnter()
    {
        canPressEnter = true;
    }

    public void teleportToPoster()
    {
        Debug.Log("Teleported to poster!");
        FindObjectOfType<PlayerController>().transform.position = facingPosterPos.position;
        if (FindObjectOfType<PlayerController>().transform.position != facingPosterPos.position)
        {
            Debug.Log("wtf went wrong ;-;");
        }
    }

    public void activateTyping()
    {
        currentState = hubIntroState.typingTopCaption;
    }

    public void loadNextLevel()
    {
        StartCoroutine(loadNextLevelEnum());
    }

    IEnumerator loadNextLevelEnum()
    {
        LerpSolution.lerpImageColour(blackScreen, Color.black, 0.7f);
        FindObjectOfType<DoorBehavior>().CloseDoor(2.5f);
        AsyncOperation sceneOp = SceneManager.LoadSceneAsync("Menu 1");
        sceneOp.allowSceneActivation = false;
        yield return GeneralManager.waitForSeconds(8f);

        music[] musicim = FindObjectsOfType<music>();
        if (musicim.Length > 0)
        {
            foreach (music muisind in musicim)
            {
                Destroy(muisind);
            }
        }

        PlayerPrefs.SetString("thats it", "message");
        sceneOp.allowSceneActivation = true;
    }

    public void nextState()
    {
        currentState++;
    }

    Coroutine checkForOpenDoor;
    string dataToSave;
    void Update()
    {
        switch(currentState)
        {
            case hubIntroState.idle:
                // Do nothing we're idle lol
                break;
            case hubIntroState.selectingPoster:
                SelectingPoster();
                break;
            case hubIntroState.selectedPoster:
                Debug.Log("We selected");

                if (posterRenderer.sprite.name == "10.17") Gas.EarnAchievement("ACH_10.17");

                dataToSave = posterRenderer.sprite.name;

                _voiceLineManager.PlayLine(setupTopLine);
                currentState = hubIntroState.waitingToType;
                break;
            case hubIntroState.waitingToType:
                // do nothing
                break;
            case hubIntroState.typingTopCaption:
                TypingCaption(TopText);
                break;
            case hubIntroState.notBottomButVoiceLine:
                _voiceLineManager.PlayLine(setupBottomLine);
                nextState();
                break;
            case hubIntroState.typingBottomCaption:
                TypingCaption(BottomText);
                break;
            case hubIntroState.finished:
                _voiceLineManager.PlayLine(finish);
                PlayerPrefs.SetString("meme data", dataToSave);
                nextState();
                break;
            case hubIntroState.okAlmostFinished:
                // do nothing ig
                break;
            case hubIntroState.okActuallyFinished:
                if(checkForOpenDoor == null)
                {
                    checkForOpenDoor = StartCoroutine(CheckForOpenDoorEnum());
                }
                break;
        }
    }

    int currentPosterIndex = 0;
    int scrollItteration = 0;
    void SelectingPoster()
    {
        timer += Time.deltaTime;


        if (timeItteration == 0 && timer >= 15 && scrollItteration == 0)
        {
            timer = 0;
            scrollItteration = 1;
            _voiceLineManager.PlayLine(haventScrolled);
        }
        else if (timeItteration == 0 && timer >= 15 && scrollItteration == 1)
        {
            timer = 0;
            scrollItteration = 1;
            _voiceLineManager.PlayLine(haventScrolled1);
        }
        else if (timeItteration == 1 && timer >= 8)
        {
            timer = 0;
            timeItteration = 2;
            _voiceLineManager.PlayLine(suggestEnter);
        }
        else if(timeItteration == 2 && timer >= 15)
        {
            timer = 0;
            timeItteration = 3;
            _voiceLineManager.PlayLine(haventEntered);
        }
        else if (timeItteration == 3 && timer >= 15)
        {
            timer = 0;
            timeItteration = 4;
            _voiceLineManager.PlayLine(haventEntered1);
        }
        else if (timeItteration == 4 && timer >= 15)
        {
            timer = 0;
            timeItteration = 5;
            _voiceLineManager.PlayLine(haventEntered2);
        }
        else if (timeItteration == 5 && timer >= 15)
        {
            timer = 0;
            timeItteration = 6;
            _voiceLineManager.PlayLine(haventEntered3);
        }

        if (Input.GetKeyDown(KeyCode.Return) && canPressEnter)
        {
            currentState = hubIntroState.selectedPoster;
            timer = 0;
            return;
        }

        if (!canScroll) return;

        if (Input.GetAxis("Mouse ScrollWheel")*0.01f > 0f)
        {
            currentPosterIndex++;
            if(currentPosterIndex > posterImages.Count - 1)
            {
                currentPosterIndex = 0;
            }

            if (timeItteration < 1) timeItteration = 1;
        }
        else if(Input.GetAxis("Mouse ScrollWheel")*0.01f < 0f)
        {
            currentPosterIndex--;
            if (currentPosterIndex < 0)
            {
                currentPosterIndex = posterImages.Count - 1;
            }

            if(timeItteration < 1) timeItteration = 1;
        }

        posterRenderer.sprite = posterImages[currentPosterIndex];
    }

    void TypingCaption(TextMeshPro text)
    {

        if (Input.GetKeyDown(KeyCode.Return) && text.text != "")
        {
            dataToSave += "|" + text.text;
            nextState();
            return;
        }
        foreach(char input in Input.inputString)
        {
            if (input == '\b')
            {
                if(text.text.Length > 0)
                {
                    text.text = text.text.Substring(0, text.text.Length - 1);
                }
            }
            else if(input != '|' && input != '\n')
            {
                text.text += input;
            }
        }
    }

    IEnumerator CheckForOpenDoorEnum()
    {
        Transform doorTrans = FindObjectOfType<DoorBehavior>().transform;

        Quaternion startDoorRot = doorTrans.rotation;
        while (doorTrans.rotation != startDoorRot)
        {
            yield return new WaitForEndOfFrame();
        }

        yield return GeneralManager.waitForSeconds(3f);
        _voiceLineManager.PlayLine(doorLine);
    }

}
